#!/usr/bin/java --source 11

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Links {

  public static void main( String[] args ) {
    final File directory = new File( "." );
    final File[] files = listFiles( directory );

    try ( BufferedWriter writer = new BufferedWriter(
      new OutputStreamWriter( new FileOutputStream( new File( directory, "README.md" ) ), StandardCharsets.UTF_8 ) ) ) {

      for ( String line : updateToc( files ) ) {
        writer.write( line );
        writer.newLine();
      }

    } catch ( IOException e ) {
      throw new RuntimeException( "Failed to update TOC", e );
    }
  }

  private static File[] listFiles( File directory ) {
    final File[] files = directory.listFiles( ( d, name ) -> name.matches( "\\d{2} - .+\\.md" ) );
    Arrays.sort( files, ( a, b ) -> a.getName().compareToIgnoreCase( b.getName() ) );
    return files;
  }

  private static List<String> updateToc( final File[] files ) {
    final List<String> line = new ArrayList<>();
    line.add( "# Spring Boot Camp" );
    line.add( "" );
    line.add( "Boot Camp for developers interested to learn Spring and Spring Boot." );
    line.add( "" );
    line.add( "## Plan" );

    for ( File file : files ) {
      final String name = file.getName();
      final String encodeFileName = encodeFileName( name );
      System.out.printf( "Updating local TOC for file %s%n", name );

      final String heading = name.split( "( - |\\.)" )[1];

      line.add( "" );
      line.add( String.format( "### [%s](%s)%n", heading, encodeFileName ) );

      for ( String t : updateLocalToc( file ) ) {
        if ( t.contains( "[Setup](" ) ) {
          continue;
        }
        line.add( t.replaceAll( "\\(#", String.format( "(%s#", encodeFileName ) ) );
      }
    }

    return line;
  }

  private static List<String> updateLocalToc( final File file ) {
    final List<String> toc = createLocalToc( file );

    try {
      final List<String> lines = Files.lines( file.toPath() ).collect( Collectors.toList() );

      final int indexOfToc = lines.indexOf( "## TOC" );
      final int indexOfNextHeader = indexOfNextHeader( lines, indexOfToc );

      final int insertTocAt;

      if ( indexOfToc >= 0 ) {
        for ( int i = indexOfNextHeader - 1; i >= indexOfToc; i-- ) {
          lines.remove( i );
        }

        insertTocAt = indexOfToc;
      } else {
        insertTocAt = indexOfNextHeader;
      }

      final List<String> list = new ArrayList<>( toc.size() + 2 );
      list.add( "## TOC" );
      list.add( "" );
      list.addAll( toc );
      addLines( lines, insertTocAt, list );

      if ( insertTocAt > 0 && false == lines.get( insertTocAt - 1 ).isBlank() ) {
        lines.add( insertTocAt, "" );
      }

      try ( BufferedWriter writer = new BufferedWriter(
        new OutputStreamWriter( new FileOutputStream( file ), StandardCharsets.UTF_8 ) ) ) {

        for ( String line : lines ) {
          writer.write( line );
          writer.newLine();
        }
      }
    } catch ( IOException e ) {
      throw new RuntimeException( "Failed to update TOC for file " + file, e );
    }

    return toc;
  }

  private static List<String> createLocalToc( final File file ) {
    try {
      return Files.lines( file.toPath() )
        .filter( line ->
          false == "## TOC".equals( line )
            && line.matches( "#{2,} .+" )
            && false == line.contains( "Recommended Reading" ) /* Multiple headings of this type*/
        )
        .map( header -> header.split( " ", 2 ) )
        .map( parts -> String.format( "%s1. [%s](#%s)", hashesToPadding( parts[0] ), parts[1], headingToHashLink( parts[1] ) ) )
        .collect( Collectors.toList() );
    } catch ( IOException e ) {
      throw new RuntimeException( "Failed to create TOC for file " + file, e );
    }
  }

  private static String encodeFileName( final String name ) {
    return name.replace( " ", "%20" )
      .replace( ",", "%2C" );
  }

  private static void addLines( final List<String> lines, final int insertTocAt, final List<String> toc ) {
    lines.add( insertTocAt, "" );
    lines.addAll( insertTocAt, toc );

    if ( insertTocAt > 0 && false == lines.get( insertTocAt - 1 ).isBlank() ) {
      lines.add( insertTocAt, "" );
    }
  }

  private static int indexOfNextHeader( final List<String> lines, final int offset ) {
    for ( int i = Math.max( 0, offset ) + 1, limit = lines.size(); i < limit; i++ ) {
      if ( lines.get( i ).startsWith( "##" ) ) {
        return i;
      }
    }

    return -1;
  }

  private static String hashesToPadding( final String hashes ) {
    return hashes.substring( 2 )
      .replaceAll( "#", "    " );
  }

  private static String headingToHashLink( final String header ) {
    return header.toLowerCase()
      .replaceAll( "/", "" )
      .replaceAll( "[^\\p{IsAlphabetic}\\p{IsDigit}]+", "-" )
      .replaceAll( "-+", "-" )
      .replaceAll( "-$", "" )
      ;
  }
}
